unit unitModelSimulador; //Unit responsável pelos calculos (Regra de Negócio)

interface

uses
  unitControllerSimulador;

type
  TSimulador = class //Classe Simulador
  private
    FListaRegistros: TListaRegistros;    //Propriedade de entrada da Classe Simulador
    FTaxa: real;                         //Propriedade de entrada da Classe Simulador
    FNumPeriodos: integer;               //Propriedade de entrada da Classe Simulador
    FCapital: real;                      //Propriedade de entrada da Classe Simulador

    procedure SetCapital(const Value: real);
    procedure SetListaRegistros(const Value: TListaRegistros);
    procedure SetNumPeriodos(const Value: integer);
    procedure SetTaxa(const Value: real);
  published

     property Capital : real read FCapital write SetCapital;
     property Taxa : real read FTaxa write SetTaxa;
     property NumPeriodos : integer read FNumPeriodos write SetNumPeriodos;

     property ListaRegistros : TListaRegistros read FListaRegistros write SetListaRegistros;
     //Pegar toda a lista pronta, jogar no lvDetalhes na interface

     function SimularAmortizacao(): TListaRegistros;   //Metodo queira realizar todos os Calulos
   end;

implementation

uses math, SysUtils;

{ TSimulador }

procedure TSimulador.SetCapital(const Value: real);
begin
  FCapital := Value;
end;

procedure TSimulador.SetListaRegistros(const Value: TListaRegistros);
begin
  FListaRegistros := Value;
end;

procedure TSimulador.SetNumPeriodos(const Value: integer);
begin
  FNumPeriodos := Value;
end;

procedure TSimulador.SetTaxa(const Value: real);
begin
  FTaxa := Value;
end;

function TSimulador.SimularAmortizacao(): TListaRegistros;
var {Variaveis que não estao nas propriedades de entrada}
    {Variaveis que vão ser ultilizadas para os calculos }
  I: Integer;
  JurosAcum, CapitalAtualizado, JurosAtualizado : real;
begin

  SetLength(FListaRegistros, 0); //Limpa o array

  JurosAcum := 0;
  CapitalAtualizado := FCapital;

  //Setando dois espaços no meu vetor
  SetLength(FListaRegistros, 1); //Inicial
  with FListaRegistros[0] do   //Com a lista de regristo na posição 0 faça
  begin
    Periodo  := '0';
    Juros    := 0;
    Amort    := 0;
    Pag      := 0;
    Saldo    := CapitalAtualizado; //Valor que recebe no editCapital
  end;

  for I := 1 to FNumPeriodos do //FNumPeriodo, informação esta dentro do editPeriodos
  begin
    //SetLength Adiciona um novo elemento no array
    SetLength(FListaRegistros, length(FListaRegistros)+1); //Periodos
    with FListaRegistros[length(FListaRegistros)-1] do
    begin
      Amort := 0;
      Pag   := 0;

      JurosAtualizado := RoundTo(CapitalAtualizado * FTaxa, -2);  //RoundTo = Arredondamento
      JurosAcum := JurosAcum + JurosAtualizado;
      if I = FNumPeriodos then //ultima linha dos periodos
      begin
        Pag := RoundTo(CapitalAtualizado + JurosAtualizado, -2);
        CapitalAtualizado := 0;
        Amort := FCapital;
      end
      else
      begin
        CapitalAtualizado := RoundTo(CapitalAtualizado + JurosAtualizado, -2);
      end;

      Periodo := IntToStr(I);
      Juros := JurosAtualizado;
      Saldo := CapitalAtualizado;
    end;
  end;


  SetLength(FListaRegistros, length(FListaRegistros)+1); //Final
  with FListaRegistros[length(FListaRegistros)-1] do
  begin
    Periodo := 'Totais';
    Amort := 0;
    Pag   := 0;
    Juros := JurosAcum;
    Saldo := CapitalAtualizado; //Montante Acumulado
  end;

  Result := FListaRegistros; //Retorna a Lista de Registro (Lista Completa)
end;

end.
